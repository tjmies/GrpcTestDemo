// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: example.proto
// Original file comments:
// protoc --cpp_out=./ example.proto
// protoc --grpc_out=./ --plugin=protoc-gen-grpc=/home/jiang/ProgramQt/libs/grpc/bin/grpc_cpp_plugin example.proto
//
#ifndef GRPC_example_2eproto__INCLUDED
#define GRPC_example_2eproto__INCLUDED

#include "example.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace MyGrpcS {

class SearchService final {
 public:
  static constexpr char const* service_full_name() {
    return "MyGrpcS.SearchService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status getDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchARequest& request, ::MyGrpcS::SearchAResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchAResponse>> AsyncgetDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchARequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchAResponse>>(AsyncgetDataARaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchAResponse>> PrepareAsyncgetDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchARequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchAResponse>>(PrepareAsyncgetDataARaw(context, request, cq));
    }
    virtual ::grpc::Status setDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchAResponse& request, ::MyGrpcS::SearchARequest* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchARequest>> AsyncsetDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchAResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchARequest>>(AsyncsetDataARaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchARequest>> PrepareAsyncsetDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchAResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchARequest>>(PrepareAsyncsetDataARaw(context, request, cq));
    }
    virtual ::grpc::Status getDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBRequest& request, ::MyGrpcS::SearchBResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchBResponse>> AsyncgetDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchBResponse>>(AsyncgetDataBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchBResponse>> PrepareAsyncgetDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchBResponse>>(PrepareAsyncgetDataBRaw(context, request, cq));
    }
    virtual ::grpc::Status setDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBResponse& request, ::MyGrpcS::SearchBRequest* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchBRequest>> AsyncsetDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchBRequest>>(AsyncsetDataBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchBRequest>> PrepareAsyncsetDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchBRequest>>(PrepareAsyncsetDataBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::MyGrpcS::StreamResponse>> streamData(::grpc::ClientContext* context, const ::MyGrpcS::StreamRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::MyGrpcS::StreamResponse>>(streamDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyGrpcS::StreamResponse>> AsyncstreamData(::grpc::ClientContext* context, const ::MyGrpcS::StreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyGrpcS::StreamResponse>>(AsyncstreamDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyGrpcS::StreamResponse>> PrepareAsyncstreamData(::grpc::ClientContext* context, const ::MyGrpcS::StreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::MyGrpcS::StreamResponse>>(PrepareAsyncstreamDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::MyGrpcS::StreamRequest>> ctreamData(::grpc::ClientContext* context, ::MyGrpcS::StreamResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::MyGrpcS::StreamRequest>>(ctreamDataRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::MyGrpcS::StreamRequest>> AsyncctreamData(::grpc::ClientContext* context, ::MyGrpcS::StreamResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::MyGrpcS::StreamRequest>>(AsyncctreamDataRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::MyGrpcS::StreamRequest>> PrepareAsyncctreamData(::grpc::ClientContext* context, ::MyGrpcS::StreamResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::MyGrpcS::StreamRequest>>(PrepareAsyncctreamDataRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>> scstreamData(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>>(scstreamDataRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>> AsyncscstreamData(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>>(AsyncscstreamDataRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>> PrepareAsyncscstreamData(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>>(PrepareAsyncscstreamDataRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void getDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchARequest* request, ::MyGrpcS::SearchAResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getDataA(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchAResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchARequest* request, ::MyGrpcS::SearchAResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchARequest* request, ::MyGrpcS::SearchAResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getDataA(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchAResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getDataA(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchAResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void setDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchAResponse* request, ::MyGrpcS::SearchARequest* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setDataA(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchARequest* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void setDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchAResponse* request, ::MyGrpcS::SearchARequest* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void setDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchAResponse* request, ::MyGrpcS::SearchARequest* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void setDataA(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchARequest* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void setDataA(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchARequest* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBRequest* request, ::MyGrpcS::SearchBResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getDataB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchBResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBRequest* request, ::MyGrpcS::SearchBResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBRequest* request, ::MyGrpcS::SearchBResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getDataB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchBResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getDataB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchBResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void setDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBResponse* request, ::MyGrpcS::SearchBRequest* response, std::function<void(::grpc::Status)>) = 0;
      virtual void setDataB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchBRequest* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void setDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBResponse* request, ::MyGrpcS::SearchBRequest* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void setDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBResponse* request, ::MyGrpcS::SearchBRequest* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void setDataB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchBRequest* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void setDataB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchBRequest* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void streamData(::grpc::ClientContext* context, ::MyGrpcS::StreamRequest* request, ::grpc::ClientReadReactor< ::MyGrpcS::StreamResponse>* reactor) = 0;
      #else
      virtual void streamData(::grpc::ClientContext* context, ::MyGrpcS::StreamRequest* request, ::grpc::experimental::ClientReadReactor< ::MyGrpcS::StreamResponse>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ctreamData(::grpc::ClientContext* context, ::MyGrpcS::StreamResponse* response, ::grpc::ClientWriteReactor< ::MyGrpcS::StreamRequest>* reactor) = 0;
      #else
      virtual void ctreamData(::grpc::ClientContext* context, ::MyGrpcS::StreamResponse* response, ::grpc::experimental::ClientWriteReactor< ::MyGrpcS::StreamRequest>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void scstreamData(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::MyGrpcS::StreamRequest,::MyGrpcS::StreamResponse>* reactor) = 0;
      #else
      virtual void scstreamData(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::MyGrpcS::StreamRequest,::MyGrpcS::StreamResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchAResponse>* AsyncgetDataARaw(::grpc::ClientContext* context, const ::MyGrpcS::SearchARequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchAResponse>* PrepareAsyncgetDataARaw(::grpc::ClientContext* context, const ::MyGrpcS::SearchARequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchARequest>* AsyncsetDataARaw(::grpc::ClientContext* context, const ::MyGrpcS::SearchAResponse& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchARequest>* PrepareAsyncsetDataARaw(::grpc::ClientContext* context, const ::MyGrpcS::SearchAResponse& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchBResponse>* AsyncgetDataBRaw(::grpc::ClientContext* context, const ::MyGrpcS::SearchBRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchBResponse>* PrepareAsyncgetDataBRaw(::grpc::ClientContext* context, const ::MyGrpcS::SearchBRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchBRequest>* AsyncsetDataBRaw(::grpc::ClientContext* context, const ::MyGrpcS::SearchBResponse& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::MyGrpcS::SearchBRequest>* PrepareAsyncsetDataBRaw(::grpc::ClientContext* context, const ::MyGrpcS::SearchBResponse& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::MyGrpcS::StreamResponse>* streamDataRaw(::grpc::ClientContext* context, const ::MyGrpcS::StreamRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::MyGrpcS::StreamResponse>* AsyncstreamDataRaw(::grpc::ClientContext* context, const ::MyGrpcS::StreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::MyGrpcS::StreamResponse>* PrepareAsyncstreamDataRaw(::grpc::ClientContext* context, const ::MyGrpcS::StreamRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::MyGrpcS::StreamRequest>* ctreamDataRaw(::grpc::ClientContext* context, ::MyGrpcS::StreamResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::MyGrpcS::StreamRequest>* AsyncctreamDataRaw(::grpc::ClientContext* context, ::MyGrpcS::StreamResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::MyGrpcS::StreamRequest>* PrepareAsyncctreamDataRaw(::grpc::ClientContext* context, ::MyGrpcS::StreamResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>* scstreamDataRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>* AsyncscstreamDataRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>* PrepareAsyncscstreamDataRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status getDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchARequest& request, ::MyGrpcS::SearchAResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchAResponse>> AsyncgetDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchARequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchAResponse>>(AsyncgetDataARaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchAResponse>> PrepareAsyncgetDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchARequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchAResponse>>(PrepareAsyncgetDataARaw(context, request, cq));
    }
    ::grpc::Status setDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchAResponse& request, ::MyGrpcS::SearchARequest* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchARequest>> AsyncsetDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchAResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchARequest>>(AsyncsetDataARaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchARequest>> PrepareAsyncsetDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchAResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchARequest>>(PrepareAsyncsetDataARaw(context, request, cq));
    }
    ::grpc::Status getDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBRequest& request, ::MyGrpcS::SearchBResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchBResponse>> AsyncgetDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchBResponse>>(AsyncgetDataBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchBResponse>> PrepareAsyncgetDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchBResponse>>(PrepareAsyncgetDataBRaw(context, request, cq));
    }
    ::grpc::Status setDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBResponse& request, ::MyGrpcS::SearchBRequest* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchBRequest>> AsyncsetDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchBRequest>>(AsyncsetDataBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchBRequest>> PrepareAsyncsetDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBResponse& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchBRequest>>(PrepareAsyncsetDataBRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::MyGrpcS::StreamResponse>> streamData(::grpc::ClientContext* context, const ::MyGrpcS::StreamRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::MyGrpcS::StreamResponse>>(streamDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::MyGrpcS::StreamResponse>> AsyncstreamData(::grpc::ClientContext* context, const ::MyGrpcS::StreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::MyGrpcS::StreamResponse>>(AsyncstreamDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::MyGrpcS::StreamResponse>> PrepareAsyncstreamData(::grpc::ClientContext* context, const ::MyGrpcS::StreamRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::MyGrpcS::StreamResponse>>(PrepareAsyncstreamDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::MyGrpcS::StreamRequest>> ctreamData(::grpc::ClientContext* context, ::MyGrpcS::StreamResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::MyGrpcS::StreamRequest>>(ctreamDataRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::MyGrpcS::StreamRequest>> AsyncctreamData(::grpc::ClientContext* context, ::MyGrpcS::StreamResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::MyGrpcS::StreamRequest>>(AsyncctreamDataRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::MyGrpcS::StreamRequest>> PrepareAsyncctreamData(::grpc::ClientContext* context, ::MyGrpcS::StreamResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::MyGrpcS::StreamRequest>>(PrepareAsyncctreamDataRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>> scstreamData(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>>(scstreamDataRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>> AsyncscstreamData(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>>(AsyncscstreamDataRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>> PrepareAsyncscstreamData(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>>(PrepareAsyncscstreamDataRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void getDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchARequest* request, ::MyGrpcS::SearchAResponse* response, std::function<void(::grpc::Status)>) override;
      void getDataA(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchAResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchARequest* request, ::MyGrpcS::SearchAResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchARequest* request, ::MyGrpcS::SearchAResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getDataA(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchAResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getDataA(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchAResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void setDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchAResponse* request, ::MyGrpcS::SearchARequest* response, std::function<void(::grpc::Status)>) override;
      void setDataA(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchARequest* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void setDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchAResponse* request, ::MyGrpcS::SearchARequest* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void setDataA(::grpc::ClientContext* context, const ::MyGrpcS::SearchAResponse* request, ::MyGrpcS::SearchARequest* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void setDataA(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchARequest* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void setDataA(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchARequest* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBRequest* request, ::MyGrpcS::SearchBResponse* response, std::function<void(::grpc::Status)>) override;
      void getDataB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchBResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBRequest* request, ::MyGrpcS::SearchBResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBRequest* request, ::MyGrpcS::SearchBResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getDataB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchBResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getDataB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchBResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void setDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBResponse* request, ::MyGrpcS::SearchBRequest* response, std::function<void(::grpc::Status)>) override;
      void setDataB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchBRequest* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void setDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBResponse* request, ::MyGrpcS::SearchBRequest* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void setDataB(::grpc::ClientContext* context, const ::MyGrpcS::SearchBResponse* request, ::MyGrpcS::SearchBRequest* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void setDataB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchBRequest* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void setDataB(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::MyGrpcS::SearchBRequest* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void streamData(::grpc::ClientContext* context, ::MyGrpcS::StreamRequest* request, ::grpc::ClientReadReactor< ::MyGrpcS::StreamResponse>* reactor) override;
      #else
      void streamData(::grpc::ClientContext* context, ::MyGrpcS::StreamRequest* request, ::grpc::experimental::ClientReadReactor< ::MyGrpcS::StreamResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ctreamData(::grpc::ClientContext* context, ::MyGrpcS::StreamResponse* response, ::grpc::ClientWriteReactor< ::MyGrpcS::StreamRequest>* reactor) override;
      #else
      void ctreamData(::grpc::ClientContext* context, ::MyGrpcS::StreamResponse* response, ::grpc::experimental::ClientWriteReactor< ::MyGrpcS::StreamRequest>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void scstreamData(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::MyGrpcS::StreamRequest,::MyGrpcS::StreamResponse>* reactor) override;
      #else
      void scstreamData(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::MyGrpcS::StreamRequest,::MyGrpcS::StreamResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchAResponse>* AsyncgetDataARaw(::grpc::ClientContext* context, const ::MyGrpcS::SearchARequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchAResponse>* PrepareAsyncgetDataARaw(::grpc::ClientContext* context, const ::MyGrpcS::SearchARequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchARequest>* AsyncsetDataARaw(::grpc::ClientContext* context, const ::MyGrpcS::SearchAResponse& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchARequest>* PrepareAsyncsetDataARaw(::grpc::ClientContext* context, const ::MyGrpcS::SearchAResponse& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchBResponse>* AsyncgetDataBRaw(::grpc::ClientContext* context, const ::MyGrpcS::SearchBRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchBResponse>* PrepareAsyncgetDataBRaw(::grpc::ClientContext* context, const ::MyGrpcS::SearchBRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchBRequest>* AsyncsetDataBRaw(::grpc::ClientContext* context, const ::MyGrpcS::SearchBResponse& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::MyGrpcS::SearchBRequest>* PrepareAsyncsetDataBRaw(::grpc::ClientContext* context, const ::MyGrpcS::SearchBResponse& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::MyGrpcS::StreamResponse>* streamDataRaw(::grpc::ClientContext* context, const ::MyGrpcS::StreamRequest& request) override;
    ::grpc::ClientAsyncReader< ::MyGrpcS::StreamResponse>* AsyncstreamDataRaw(::grpc::ClientContext* context, const ::MyGrpcS::StreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::MyGrpcS::StreamResponse>* PrepareAsyncstreamDataRaw(::grpc::ClientContext* context, const ::MyGrpcS::StreamRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::MyGrpcS::StreamRequest>* ctreamDataRaw(::grpc::ClientContext* context, ::MyGrpcS::StreamResponse* response) override;
    ::grpc::ClientAsyncWriter< ::MyGrpcS::StreamRequest>* AsyncctreamDataRaw(::grpc::ClientContext* context, ::MyGrpcS::StreamResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::MyGrpcS::StreamRequest>* PrepareAsyncctreamDataRaw(::grpc::ClientContext* context, ::MyGrpcS::StreamResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>* scstreamDataRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>* AsyncscstreamDataRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>* PrepareAsyncscstreamDataRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getDataA_;
    const ::grpc::internal::RpcMethod rpcmethod_setDataA_;
    const ::grpc::internal::RpcMethod rpcmethod_getDataB_;
    const ::grpc::internal::RpcMethod rpcmethod_setDataB_;
    const ::grpc::internal::RpcMethod rpcmethod_streamData_;
    const ::grpc::internal::RpcMethod rpcmethod_ctreamData_;
    const ::grpc::internal::RpcMethod rpcmethod_scstreamData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getDataA(::grpc::ServerContext* context, const ::MyGrpcS::SearchARequest* request, ::MyGrpcS::SearchAResponse* response);
    virtual ::grpc::Status setDataA(::grpc::ServerContext* context, const ::MyGrpcS::SearchAResponse* request, ::MyGrpcS::SearchARequest* response);
    virtual ::grpc::Status getDataB(::grpc::ServerContext* context, const ::MyGrpcS::SearchBRequest* request, ::MyGrpcS::SearchBResponse* response);
    virtual ::grpc::Status setDataB(::grpc::ServerContext* context, const ::MyGrpcS::SearchBResponse* request, ::MyGrpcS::SearchBRequest* response);
    virtual ::grpc::Status streamData(::grpc::ServerContext* context, const ::MyGrpcS::StreamRequest* request, ::grpc::ServerWriter< ::MyGrpcS::StreamResponse>* writer);
    virtual ::grpc::Status ctreamData(::grpc::ServerContext* context, ::grpc::ServerReader< ::MyGrpcS::StreamRequest>* reader, ::MyGrpcS::StreamResponse* response);
    virtual ::grpc::Status scstreamData(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::MyGrpcS::StreamResponse, ::MyGrpcS::StreamRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_getDataA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDataA() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getDataA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDataA(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchARequest* /*request*/, ::MyGrpcS::SearchAResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDataA(::grpc::ServerContext* context, ::MyGrpcS::SearchARequest* request, ::grpc::ServerAsyncResponseWriter< ::MyGrpcS::SearchAResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setDataA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setDataA() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_setDataA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDataA(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchAResponse* /*request*/, ::MyGrpcS::SearchARequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDataA(::grpc::ServerContext* context, ::MyGrpcS::SearchAResponse* request, ::grpc::ServerAsyncResponseWriter< ::MyGrpcS::SearchARequest>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getDataB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getDataB() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getDataB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDataB(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchBRequest* /*request*/, ::MyGrpcS::SearchBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDataB(::grpc::ServerContext* context, ::MyGrpcS::SearchBRequest* request, ::grpc::ServerAsyncResponseWriter< ::MyGrpcS::SearchBResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_setDataB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_setDataB() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_setDataB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDataB(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchBResponse* /*request*/, ::MyGrpcS::SearchBRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDataB(::grpc::ServerContext* context, ::MyGrpcS::SearchBResponse* request, ::grpc::ServerAsyncResponseWriter< ::MyGrpcS::SearchBRequest>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_streamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_streamData() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_streamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status streamData(::grpc::ServerContext* /*context*/, const ::MyGrpcS::StreamRequest* /*request*/, ::grpc::ServerWriter< ::MyGrpcS::StreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststreamData(::grpc::ServerContext* context, ::MyGrpcS::StreamRequest* request, ::grpc::ServerAsyncWriter< ::MyGrpcS::StreamResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ctreamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ctreamData() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ctreamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ctreamData(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::MyGrpcS::StreamRequest>* /*reader*/, ::MyGrpcS::StreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestctreamData(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::MyGrpcS::StreamResponse, ::MyGrpcS::StreamRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(5, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_scstreamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_scstreamData() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_scstreamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status scstreamData(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::MyGrpcS::StreamResponse, ::MyGrpcS::StreamRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestscstreamData(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::MyGrpcS::StreamResponse, ::MyGrpcS::StreamRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(6, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getDataA<WithAsyncMethod_setDataA<WithAsyncMethod_getDataB<WithAsyncMethod_setDataB<WithAsyncMethod_streamData<WithAsyncMethod_ctreamData<WithAsyncMethod_scstreamData<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getDataA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getDataA() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::MyGrpcS::SearchARequest, ::MyGrpcS::SearchAResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MyGrpcS::SearchARequest* request, ::MyGrpcS::SearchAResponse* response) { return this->getDataA(context, request, response); }));}
    void SetMessageAllocatorFor_getDataA(
        ::grpc::experimental::MessageAllocator< ::MyGrpcS::SearchARequest, ::MyGrpcS::SearchAResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::MyGrpcS::SearchARequest, ::MyGrpcS::SearchAResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getDataA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDataA(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchARequest* /*request*/, ::MyGrpcS::SearchAResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getDataA(
      ::grpc::CallbackServerContext* /*context*/, const ::MyGrpcS::SearchARequest* /*request*/, ::MyGrpcS::SearchAResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getDataA(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MyGrpcS::SearchARequest* /*request*/, ::MyGrpcS::SearchAResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_setDataA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_setDataA() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::MyGrpcS::SearchAResponse, ::MyGrpcS::SearchARequest>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MyGrpcS::SearchAResponse* request, ::MyGrpcS::SearchARequest* response) { return this->setDataA(context, request, response); }));}
    void SetMessageAllocatorFor_setDataA(
        ::grpc::experimental::MessageAllocator< ::MyGrpcS::SearchAResponse, ::MyGrpcS::SearchARequest>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::MyGrpcS::SearchAResponse, ::MyGrpcS::SearchARequest>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_setDataA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDataA(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchAResponse* /*request*/, ::MyGrpcS::SearchARequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setDataA(
      ::grpc::CallbackServerContext* /*context*/, const ::MyGrpcS::SearchAResponse* /*request*/, ::MyGrpcS::SearchARequest* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setDataA(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MyGrpcS::SearchAResponse* /*request*/, ::MyGrpcS::SearchARequest* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getDataB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getDataB() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::MyGrpcS::SearchBRequest, ::MyGrpcS::SearchBResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MyGrpcS::SearchBRequest* request, ::MyGrpcS::SearchBResponse* response) { return this->getDataB(context, request, response); }));}
    void SetMessageAllocatorFor_getDataB(
        ::grpc::experimental::MessageAllocator< ::MyGrpcS::SearchBRequest, ::MyGrpcS::SearchBResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::MyGrpcS::SearchBRequest, ::MyGrpcS::SearchBResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getDataB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDataB(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchBRequest* /*request*/, ::MyGrpcS::SearchBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getDataB(
      ::grpc::CallbackServerContext* /*context*/, const ::MyGrpcS::SearchBRequest* /*request*/, ::MyGrpcS::SearchBResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getDataB(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MyGrpcS::SearchBRequest* /*request*/, ::MyGrpcS::SearchBResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_setDataB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_setDataB() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::MyGrpcS::SearchBResponse, ::MyGrpcS::SearchBRequest>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MyGrpcS::SearchBResponse* request, ::MyGrpcS::SearchBRequest* response) { return this->setDataB(context, request, response); }));}
    void SetMessageAllocatorFor_setDataB(
        ::grpc::experimental::MessageAllocator< ::MyGrpcS::SearchBResponse, ::MyGrpcS::SearchBRequest>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::MyGrpcS::SearchBResponse, ::MyGrpcS::SearchBRequest>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_setDataB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDataB(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchBResponse* /*request*/, ::MyGrpcS::SearchBRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setDataB(
      ::grpc::CallbackServerContext* /*context*/, const ::MyGrpcS::SearchBResponse* /*request*/, ::MyGrpcS::SearchBRequest* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setDataB(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MyGrpcS::SearchBResponse* /*request*/, ::MyGrpcS::SearchBRequest* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_streamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_streamData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::MyGrpcS::StreamRequest* request) { return this->streamData(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_streamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status streamData(::grpc::ServerContext* /*context*/, const ::MyGrpcS::StreamRequest* /*request*/, ::grpc::ServerWriter< ::MyGrpcS::StreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::MyGrpcS::StreamResponse>* streamData(
      ::grpc::CallbackServerContext* /*context*/, const ::MyGrpcS::StreamRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::MyGrpcS::StreamResponse>* streamData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::MyGrpcS::StreamRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ctreamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ctreamData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::MyGrpcS::StreamResponse* response) { return this->ctreamData(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_ctreamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ctreamData(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::MyGrpcS::StreamRequest>* /*reader*/, ::MyGrpcS::StreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::MyGrpcS::StreamRequest>* ctreamData(
      ::grpc::CallbackServerContext* /*context*/, ::MyGrpcS::StreamResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::MyGrpcS::StreamRequest>* ctreamData(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::MyGrpcS::StreamResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_scstreamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_scstreamData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackBidiHandler< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->scstreamData(context); }));
    }
    ~ExperimentalWithCallbackMethod_scstreamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status scstreamData(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::MyGrpcS::StreamResponse, ::MyGrpcS::StreamRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>* scstreamData(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>* scstreamData(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_getDataA<ExperimentalWithCallbackMethod_setDataA<ExperimentalWithCallbackMethod_getDataB<ExperimentalWithCallbackMethod_setDataB<ExperimentalWithCallbackMethod_streamData<ExperimentalWithCallbackMethod_ctreamData<ExperimentalWithCallbackMethod_scstreamData<Service > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_getDataA<ExperimentalWithCallbackMethod_setDataA<ExperimentalWithCallbackMethod_getDataB<ExperimentalWithCallbackMethod_setDataB<ExperimentalWithCallbackMethod_streamData<ExperimentalWithCallbackMethod_ctreamData<ExperimentalWithCallbackMethod_scstreamData<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getDataA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDataA() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getDataA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDataA(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchARequest* /*request*/, ::MyGrpcS::SearchAResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setDataA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setDataA() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_setDataA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDataA(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchAResponse* /*request*/, ::MyGrpcS::SearchARequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getDataB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getDataB() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getDataB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDataB(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchBRequest* /*request*/, ::MyGrpcS::SearchBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_setDataB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_setDataB() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_setDataB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDataB(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchBResponse* /*request*/, ::MyGrpcS::SearchBRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_streamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_streamData() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_streamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status streamData(::grpc::ServerContext* /*context*/, const ::MyGrpcS::StreamRequest* /*request*/, ::grpc::ServerWriter< ::MyGrpcS::StreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ctreamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ctreamData() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ctreamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ctreamData(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::MyGrpcS::StreamRequest>* /*reader*/, ::MyGrpcS::StreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_scstreamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_scstreamData() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_scstreamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status scstreamData(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::MyGrpcS::StreamResponse, ::MyGrpcS::StreamRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDataA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDataA() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getDataA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDataA(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchARequest* /*request*/, ::MyGrpcS::SearchAResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDataA(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setDataA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setDataA() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_setDataA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDataA(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchAResponse* /*request*/, ::MyGrpcS::SearchARequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDataA(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getDataB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getDataB() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getDataB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDataB(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchBRequest* /*request*/, ::MyGrpcS::SearchBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetDataB(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_setDataB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_setDataB() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_setDataB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDataB(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchBResponse* /*request*/, ::MyGrpcS::SearchBRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsetDataB(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_streamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_streamData() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_streamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status streamData(::grpc::ServerContext* /*context*/, const ::MyGrpcS::StreamRequest* /*request*/, ::grpc::ServerWriter< ::MyGrpcS::StreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequeststreamData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ctreamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ctreamData() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ctreamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ctreamData(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::MyGrpcS::StreamRequest>* /*reader*/, ::MyGrpcS::StreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestctreamData(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(5, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_scstreamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_scstreamData() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_scstreamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status scstreamData(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::MyGrpcS::StreamResponse, ::MyGrpcS::StreamRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestscstreamData(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(6, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getDataA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getDataA() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getDataA(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getDataA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDataA(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchARequest* /*request*/, ::MyGrpcS::SearchAResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getDataA(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getDataA(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_setDataA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_setDataA() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setDataA(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_setDataA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDataA(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchAResponse* /*request*/, ::MyGrpcS::SearchARequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setDataA(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setDataA(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getDataB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getDataB() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getDataB(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getDataB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getDataB(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchBRequest* /*request*/, ::MyGrpcS::SearchBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getDataB(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getDataB(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_setDataB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_setDataB() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->setDataB(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_setDataB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setDataB(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchBResponse* /*request*/, ::MyGrpcS::SearchBRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* setDataB(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* setDataB(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_streamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_streamData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->streamData(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_streamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status streamData(::grpc::ServerContext* /*context*/, const ::MyGrpcS::StreamRequest* /*request*/, ::grpc::ServerWriter< ::MyGrpcS::StreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* streamData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* streamData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ctreamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ctreamData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->ctreamData(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ctreamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ctreamData(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::MyGrpcS::StreamRequest>* /*reader*/, ::MyGrpcS::StreamResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* ctreamData(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* ctreamData(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_scstreamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_scstreamData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->scstreamData(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_scstreamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status scstreamData(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::MyGrpcS::StreamResponse, ::MyGrpcS::StreamRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* scstreamData(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* scstreamData(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDataA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getDataA() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MyGrpcS::SearchARequest, ::MyGrpcS::SearchAResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::MyGrpcS::SearchARequest, ::MyGrpcS::SearchAResponse>* streamer) {
                       return this->StreamedgetDataA(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getDataA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDataA(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchARequest* /*request*/, ::MyGrpcS::SearchAResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDataA(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MyGrpcS::SearchARequest,::MyGrpcS::SearchAResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setDataA : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setDataA() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MyGrpcS::SearchAResponse, ::MyGrpcS::SearchARequest>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::MyGrpcS::SearchAResponse, ::MyGrpcS::SearchARequest>* streamer) {
                       return this->StreamedsetDataA(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setDataA() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setDataA(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchAResponse* /*request*/, ::MyGrpcS::SearchARequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetDataA(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MyGrpcS::SearchAResponse,::MyGrpcS::SearchARequest>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getDataB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getDataB() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MyGrpcS::SearchBRequest, ::MyGrpcS::SearchBResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::MyGrpcS::SearchBRequest, ::MyGrpcS::SearchBResponse>* streamer) {
                       return this->StreamedgetDataB(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getDataB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getDataB(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchBRequest* /*request*/, ::MyGrpcS::SearchBResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetDataB(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MyGrpcS::SearchBRequest,::MyGrpcS::SearchBResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setDataB : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_setDataB() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::MyGrpcS::SearchBResponse, ::MyGrpcS::SearchBRequest>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::MyGrpcS::SearchBResponse, ::MyGrpcS::SearchBRequest>* streamer) {
                       return this->StreamedsetDataB(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_setDataB() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setDataB(::grpc::ServerContext* /*context*/, const ::MyGrpcS::SearchBResponse* /*request*/, ::MyGrpcS::SearchBRequest* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsetDataB(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::MyGrpcS::SearchBResponse,::MyGrpcS::SearchBRequest>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getDataA<WithStreamedUnaryMethod_setDataA<WithStreamedUnaryMethod_getDataB<WithStreamedUnaryMethod_setDataB<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_streamData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_streamData() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::MyGrpcS::StreamRequest, ::MyGrpcS::StreamResponse>* streamer) {
                       return this->StreamedstreamData(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_streamData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status streamData(::grpc::ServerContext* /*context*/, const ::MyGrpcS::StreamRequest* /*request*/, ::grpc::ServerWriter< ::MyGrpcS::StreamResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedstreamData(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::MyGrpcS::StreamRequest,::MyGrpcS::StreamResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_streamData<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_getDataA<WithStreamedUnaryMethod_setDataA<WithStreamedUnaryMethod_getDataB<WithStreamedUnaryMethod_setDataB<WithSplitStreamingMethod_streamData<Service > > > > > StreamedService;
};

}  // namespace MyGrpcS


#endif  // GRPC_example_2eproto__INCLUDED
